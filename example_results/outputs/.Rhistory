# Raincloud plot (using data in original units, without arcsin transformation).
summary_data_p_prop <- summarySE(data = data_p_prop, measurevar = "p_sig", groupvars = "texture",
na.rm = TRUE, conf.interval = 0.95, .drop = TRUE)
GC_p_plot_long_prop <- data_p_prop  %>%
mutate(texture = fct_relevel(data_p_prop$texture, "H", "P")) %>%
ggplot(aes(y = p_sig, x = texture, fill = texture)) +
geom_flat_violin(position = position_nudge(x = .175, y = 0), alpha = .8, show.legend = FALSE) +
geom_point(aes(y = p_sig, x = texture, fill = texture), position = position_jitter(width = .06, height = 0), shape = 21, size = 2, color = "black", alpha = 0.5, show.legend = FALSE) +
#geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +
geom_errorbar(data = summary_data_p_prop, aes(x = texture, y = p_sig, ymin = p_sig-ci, ymax = p_sig+ci), position = position_nudge(c(-.175, -.175)), colour = "black",
width = 0.08, size = 0.6) +
geom_point(data = summary_data_p_prop, aes(x = texture, y = p_sig, fill = texture), position =
position_nudge(c(-.175, -.175)), shape = 21, size = 5, colour = "black", fill = c('orange', 'royalblue'), show.legend = FALSE) +
expand_limits(x = 3) +
# guides(fill = "none") +
# guides(color = "none") +
scale_color_ucscgb() +
scale_fill_ucscgb() +
scale_fill_manual(values=c('orange', 'royalblue')) +
# labs(title="Granger Test: \nProportion of \nsignificant p values",
#      x="Texture", y = "Proportion")+
labs(x="Texture", y = "Proportion")+
scale_x_discrete("Texture", labels = c("H" = "Homophonic","P" = "Polyphonic")) +
theme_bw() +
raincloud_theme
GC_p_plot_long_prop
ggsave("GC_p_plot_long_prop.png", dpi=600)
## Binomial Generalized Linear Mixed Effects Model (GLMER) on binary data
# Binary values indicate whether (1) or not (0) each individual Granger test was statistically significant.
Pv_binary.glme <- glmer(p_sig ~ 1 + texture + (1 | direction/pair) + (1 | piece/part/phrase),  family=binomial, data = dataPv,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary.output <- summary(Pv_binary.glme)
Pv_binary.output
capture.output(Pv_binary.output, file = "Pv_binary_GLMER.txt") # Write output to text file
# Compute confidence intervals
Pv_binary.glme.ci <- confint(Pv_binary.glme)
Pv_binary.glme.ci
capture.output(Pv_binary.glme.ci, file = "BinaryGLMM_SigGC_CI.txt")
# Find best-fitting random effects model
Pv_binary_random1.glme <- glmer(p_sig ~ 1 + (1 | direction/pair) + (1 | piece/part/phrase),  family=binomial, data = dataPv,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary_random1.output <- summary(Pv_binary_random1.glme)
Pv_binary_random1.output
capture.output(Pv_binary_random1.output, file = "Pv_binary_random1_GLMER.txt") # Write output to text file
Pv_binary_random2.glme <- glmer(p_sig ~ 1 + (1 | piece/part/phrase/direction/pair),  family=binomial, data = dataPv,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary_random2.output <- summary(Pv_binary_random2.glme)
Pv_binary_random2.output
#capture.output(Pv_binary_random1.output, file = "Pv_binary_random1_GLMER.txt") # Write output to text file
# Compare the reduced models. Result: Almost identical - Use Pv_binary_random1.glme to keep similar structure to lmer above
Pv_binary_random_comparison <- anova(Pv_binary_random1.glme, Pv_binary_random2.glme)
Pv_binary_random_comparison
#capture.output(Pv_binary_random_comparison, file = "Pv_binary_random_comparison.txt") # Write output to text file
# Compare the full and reduced model
Pv_binary_comparison <- anova(Pv_binary.glme, Pv_binary_random1.glme)
Pv_binary_comparison
capture.output(Pv_binary_comparison, file = "Pv_binary_comparison.txt") # Write output to text file
# Convert your models to tidy format
Pv_binary_tidy <- broom.mixed::tidy(Pv_binary.glme)
Pv_binary_random1_tidy <- broom.mixed::tidy(Pv_binary_random1.glme)
# Now create your table
Pv_binary_GLMER.table <- huxreg(Pv_binary_tidy, Pv_binary_random1_tidy, statistics = NULL, number_format = 2)
Pv_binary_GLMER.table
huxtable::quick_docx(Pv_binary_GLMER.table, file = "Pv_binary_GLMER_table.docx") # Make Word table (not standardized coefficients)
## Analysis of effects of MELODY INSTRUMENT ------
# Notes: First need to add column to indicate whether GC data in each row are for:
# (1) melody influencing other (Melody_to_Other)
# (2) other influencing melody (Other_to_Melody), or other influencing other (Other_to_Other),
# in Homophonic textures or 'Mixed' in polyphonic textures
dataPv_melody <- melt(data_both, id.vars = c('piece', 'part', 'phrase', 'texture', 'pair', 'musician1', 'musician2', 'melody_instrument'), measure.vars = c('p_M1_M2_Bin', 'p_M2_M1_Bin'), variable.name = 'direction', value.name = "p_sig")
dataPv_melody$leadership <- ifelse(dataPv_melody$melody_instrument == 'Mixed', 'Mixed',
ifelse(dataPv_melody$melody_instrument == dataPv_melody$musician1 & dataPv_melody$direction == 'p_M1_M2_Bin', 'Melody_to_Other',
ifelse(dataPv_melody$melody_instrument == dataPv_melody$musician2 & dataPv_melody$direction == 'p_M2_M1_Bin', 'Melody_to_Other',
ifelse(dataPv_melody$melody_instrument == dataPv_melody$musician2 & dataPv_melody$direction == 'p_M1_M2_Bin', 'Other_to_Melody',
ifelse(dataPv_melody$melody_instrument == dataPv_melody$musician1 & dataPv_melody$direction == 'p_M2_M1_Bin', 'Other_to_Melody', 'Other_to_Other')))))
#dataPv_melody <- melt(data_both, id.vars = c('piece', 'part', 'phrase', 'texture', 'pair', 'leadership'), measure.vars = c('p_M1_M2_Bin', 'p_M2_M1_Bin'), variable.name = 'direction', value.name = "p_sig")
# Compute proportion data
data_p_prop_melody <- dataPv_melody %>% group_by(piece, part, phrase, leadership) %>% summarise_at(vars(p_sig), mean)
data_p_prop_melody <- data.frame(data_p_prop_melody)
data_p_prop_melody$leadership <- as.factor(data_p_prop_melody$leadership)
# Arcsin transform
data_p_prop_melody$p_sig_arcsn <- asin(sqrt(data_p_prop_melody$p_sig))
# Run Shapiro-Wilk test of normality. Can assume normality if p > .05
data_p_prop_melody %>%
group_by(leadership) %>%
shapiro_test(p_sig_arcsn) # Neither Homophonic nor Polyphonic proportion data are normally distributed. This justifies GLMER
# Do quick boxplot to visualize data grouped by leadership; will make nicer plot below
data_p_prop_melody %>% mutate(leadership = fct_relevel(data_p_prop_melody$leadership, "Melody_to_Other", "Other_to_Melody", "Other_to_Other", "Mixed")) %>%
ggplot(aes(y = p_sig, x = leadership)) + geom_boxplot() + geom_point(position = position_jitter(width = .15, height = .02), alpha = .5) + theme_bw()
# First run the full model to test the effect of the fixed factor 'leadership' on whether or not GC is significant (p_sig or p_sig_arcsn; don't need arcsin)
Pv_long_melody <- lmer(p_sig ~ 1 + leadership + (1 | piece/part/phrase), data = data_p_prop_melody,
control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
# Pv_long_melody <- lmer(p_sig_arcsn ~ 1 + leadership + (1 | piece/part/phrase), data = data_p_prop_melody,
#                   control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Pv_long_melody.output <- summary(Pv_long_melody) # Print model summary to console
Pv_long_melody.output
capture.output(Pv_long_melody.output, file = "ProportionSigGC_Melody.txt") # Write output to text file
# save model output as a text file
class(Pv_long_melody) <- "lmerMod"
stargazer(Pv_long_melody, type = "text", title='LMER Summary Statistics - Proportion Significant', out='Pv_long_melody_table.txt')
# Pairwise comparisons (exhaustive - don't use; use planned orthogonal contrasts instead)
Melody_Pairwise.comp <- lsmeans(Pv_long_melody, pairwise ~ leadership, mult.name = "Leadership", pbkrtest.limit = 9999)
Melody_Pairwise.comp
write.table(Melody_Pairwise.comp, file = "SigGC_Melody_pairwise_comparisons.txt", sep = "")
# ANOVA with orthogonal planned contrasts: (1) Homophonic vs Polyphonic; (2) Pairing with Melody vs No Melody; (3) Melody-to-Other vs Other-to-Melody
levels(data_p_prop_melody$leadership) # Check order of conditions (important for specifying contrast coefficients)
Melody_PlannedComp <- lsmeans(Pv_long_melody, "leadership")
HvsP = c(1,-3,1,1) # Contrast comparing Homophonic with Polyphonic - this comparison is redundant with the main analysis
MELvsNoMEL = c(1,0,1,-2) # Contrast comparing pairings including Melody player vs pairings excluding Melody player
MOvsOM = c(1,0,-1,0) # Contrast comparing Melody-to-Other vs Other-to-Melody
Contrasts = list(HvsP, MELvsNoMEL, MOvsOM)
Melody_PlannedComp.output <- contrast(Melody_PlannedComp, Contrasts, adjust="none") # No need for adjust for multiple comparisons since contrasts are planned & orthogonal
capture.output(Melody_PlannedComp.output, file = "SigGC_Melody_planned_contrasts.txt")
Melody_PlannedComp.output
# Compute confidence intervals
Melody_PlannedComp.output.ci <- confint(Melody_PlannedComp.output)
Melody_PlannedComp.output.ci
capture.output(Melody_PlannedComp.output.ci, file = "Melody_PlannedComp.output_CI.txt")
# Now run a reduced model excluding the fixed factor of 'leadership'.
Pv_long_melody_reduced <- lmer(p_sig ~ 1 + (1 | piece/part/phrase), data = data_p_prop_melody,
control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
# Pv_long_melody_reduced <- lmer(p_sig_arcsn ~ 1 + (1 | piece/part/phrase), data = data_p_prop_melody,
#                         control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
summary(Pv_long_melody_reduced) # Print model summary to console
# Compare full and reduced models to see whether the model that includes texture explains more variance in GC
Pv_long_melody.anova <- anova(Pv_long_melody, Pv_long_melody_reduced) # Check output to see whether the Chi-square value is significant
Pv_long_melody.anova
capture.output(Pv_long_melody.anova, file = "ProportionSigGC_Melody_model_eval.txt") # Write output to text file
# The following does the same model comparison as above (to double check)
Pv_long_melody_LLE <- mixed(p_sig_arcsn ~ 1 + leadership + (1 | piece/part/phrase), data = data_p_prop_melody,
control = lmerControl(optimizer = "bobyqa"), method = "LRT")
Pv_long_melody_LLE # Print model summary to console and check Chi-square (should be the same as above)
# Raincloud plot (using data in original units, without arcsin transformation).
summary_melody_p_prop <- summarySE(data = data_p_prop_melody, measurevar = "p_sig", groupvars = "leadership",
na.rm = TRUE, conf.interval = 0.95, .drop = TRUE)
# summary_melody_p_prop <- summarySEwithin(data = data_p_prop_melody, measurevar = "p_sig", withinvars = "leadership", idvar = NULL,
#                                        na.rm = TRUE, conf.interval = 0.95, .drop = TRUE)
GC_p_plot_leadership <- data_p_prop_melody  %>%
mutate(leadership = fct_relevel(data_p_prop_melody$leadership, "Melody_to_Other", "Other_to_Melody", "Other_to_Other", "Mixed")) %>%
ggplot(aes(y = p_sig, x = leadership, fill = leadership)) +
geom_flat_violin(position = position_nudge(x = .175, y = 0), alpha = .8, show.legend = FALSE) +
geom_point(aes(y = p_sig, x = leadership, fill = leadership), position = position_jitter(width = .06, height = 0), shape = 21, size = 2, color = "black", alpha = 0.5, show.legend = FALSE) +
#geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +
geom_errorbar(data = summary_melody_p_prop, aes(x = leadership, y = p_sig, ymin = p_sig-ci, ymax = p_sig+ci), position = position_nudge(c(-.175, -.175, -.175, -.175)), colour = "black",
width = 0.08, size = 0.6) +
geom_point(data = summary_melody_p_prop, aes(x = leadership, y = p_sig, fill = leadership), position =
position_nudge(c(-.175, -.175, -.175, -.175)), shape = 21, size = 4, colour = "black", fill = c('#A2B59F', 'lightgrey', 'darkgrey', '#B59F9F'), show.legend = FALSE) +
expand_limits(x = 3) +
# guides(fill = "none") +
# guides(color = "none") +
#scale_color_ucscgb() +
#scale_fill_ucscgb() +
scale_fill_manual(values=c('#A2B59F', 'lightgrey', 'darkgrey', '#B59F9F')) +
labs(x="Direction of Influence", y = "Proportion")+
scale_x_discrete("Direction of Influence", labels = c("Melody_to_Other" = "Melody\non Other", "Other_to_Melody" = "Other\non Melody", "Other_to_Other" = "Other\non Other", "Mixed" = "Mixed\nPolyphonic")) +
theme_bw() +
raincloud_theme
GC_p_plot_leadership
ggsave("GC_p_plot_leadership.png", dpi=600)
## Binomial Generalized Linear Mixed Effects Model (GLMER) on binary data for MELODY INSTRUMENT
# Notes: Binary values indicate whether (1) or not (0) each individual Granger test
# was statistically significant.
Pv_binary_melody.glme <- glmer(p_sig ~ 1 + leadership + (1 | direction/pair) + (1 | piece/part/phrase),  family=binomial, data = dataPv_melody,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary_melody.output <- summary(Pv_binary_melody.glme)
Pv_binary_melody.output
capture.output(Pv_binary_melody.output, file = "Pv_binary_melody_GLMER.txt") # Write output to text file
# Find best-fitting random effects model
Pv_binary_melody_random1.glme <- glmer(p_sig ~ 1 + (1 | direction/pair) + (1 | piece/part/phrase),  family=binomial, data = dataPv_melody,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary_melody_random1.output <- summary(Pv_binary_melody_random1.glme)
Pv_binary_melody_random1.output
capture.output(Pv_binary_random1.output, file = "Pv_binary_random1_GLMER.txt") # Write output to text file
# Compare the full and reduced model
Pv_binary_melody_comparison <- anova(Pv_binary_melody.glme, Pv_binary_melody_random1.glme)
Pv_binary_melody_comparison
capture.output(Pv_binary_melody_comparison, file = "Pv_binary_melody_comparison.txt") # Write output to text file
# Make a table
Pv_binary_melody_GLMER.table <- huxreg(Pv_binary_melody.glme, Pv_binary_melody_random1.glme, statistics = NULL, number_format = 2)
Pv_binary_melody_GLMER.table
huxtable::quick_docx(Pv_binary_melody_GLMER.table, file = "Pv_binary_melody_GLMER_table.docx") # Make Word table (not standardized coefficients)
# Orthogonal planned contrasts: (1) Homophonic vs Polyphonic; (2) Pairing with Melody vs No Melody; (3) Melody-to-Other vs Other-to-Melody
levels(dataPv_melody$leadership) # Check order of conditions (important for specifying contrast coefficients)
Melody_PlannedComp.glme <- lsmeans(Pv_binary_melody.glme, "leadership")
HvsP = c(1,-3,1,1) # Contrast comparing Homophonic with Polyphonic - this comparison is redundant with the main analysis
MELvsNoMEL = c(1,0,1,-2) # Contrast comparing pairings including Melody player vs pairings excluding Melody player
MOvsOM = c(1,0,-1,0) # Contrast comparing Melody-to-Other vs Other-to-Melody
Contrasts = list(HvsP, MELvsNoMEL, MOvsOM)
Melody_PlannedComp.glme.output <- contrast(Melody_PlannedComp.glme, Contrasts, adjust="none") # No need for adjust for multiple comparisons since contrasts are planned & orthogonal
capture.output(Melody_PlannedComp.glme.output, file = "SigGC_Melody_GLMM_planned_contrasts.txt")
Melody_PlannedComp.glme.output
# Compute confidence intervals
Melody_PlannedComp.glme.output.ci <- confint(Melody_PlannedComp.glme.output)
Melody_PlannedComp.glme.output.ci
capture.output(Melody_PlannedComp.glme.output.ci, file = "Melody_GLMM_PlannedComp.output_CI.txt")
# Analysis of Omega Ensemble Granger Causality data
# Clear work Environment
rm(list=ls())
# Set options
options(scipen = 100, digits = 4)
# Load Libraries
library(readr)
library(reshape2)
library(dplyr)
library(lme4) # For lmer
library(afex) # For mixed
library(lsmeans)
library(ggeffects) # For plotting lmer predictions
library(stargazer) # for outputting model summary statistics
library(ggplot2)
library(forcats)
library(ggsci)
library(huxtable)
library(rstatix)
library(Rmisc)
library(broom.mixed)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
# Set working directory
setwd("C:/San/Projects/DirectionalityOfInfluence/example_results") # set path to folder with csv-files
# Analysis of Omega Ensemble Granger Causality data
# Clear work Environment
rm(list=ls())
# Set options
options(scipen = 100, digits = 4)
# Load Libraries
library(readr)
library(reshape2)
library(dplyr)
library(lme4) # For lmer
library(afex) # For mixed
library(lsmeans)
library(ggeffects) # For plotting lmer predictions
library(stargazer) # for outputting model summary statistics
library(ggplot2)
library(forcats)
library(ggsci)
library(huxtable)
library(rstatix)
library(Rmisc)
library(broom.mixed)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
# Set working directory
setwd("C:/San/Projects/DirectionalityOfInfluence/example_results/text_files") # set path to folder with csv-files
# Set Theme for Raincloud Plots
raincloud_theme = theme(
text = element_text(size = 14),
axis.title.x = element_text(size = 24, vjust = 0),
axis.title.y = element_text(size = 24, vjust = 2),
axis.text = element_text(size = 20, color = 'black'),
#axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.title=element_text(size=20),
legend.text=element_text(size=20),
legend.position = "right",
plot.title = element_text(lineheight=.8, face="bold", size = 28),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
# Import Data
data_brahms <- data.frame(read_csv('C:/San/Projects/DirectionalityOfInfluence/example_results/Final_Brahms_Results_GC.csv'))
data_borodin <- data.frame(read_csv('C:/San/Projects/DirectionalityOfInfluence/example_results/Final_Borodin_Results_GC.csv'))
data_both <- rbind(data_brahms, data_borodin)
# Data Preparation for P-value Analysis. Inlcudes conversion of variables to factors (not necessary).
dataPv <- melt(data_both, id.vars = c('piece', 'part', 'phrase', 'texture', 'pair'), measure.vars = c('p_M1_M2_Bin', 'p_M2_M1_Bin'), variable.name = 'direction', value.name = "p_sig")
dataPv$texture <- as.factor(dataPv$texture)
dataPv$piece <- as.factor(dataPv$piece)
dataPv$part <- as.factor(dataPv$part)
dataPv$phrase <- as.factor(dataPv$phrase)
## Analysis of PROPORTIONS of significant GC values -------
# Compute proportions across pairs
data_p_prop <- dataPv %>% group_by(piece, part, phrase, texture, direction) %>% summarise_at(vars(p_sig), mean)
data_p_prop <- data.frame(data_p_prop)
# Arcsin transform the data to avoid clustering at 1.
data_p_prop$p_sig_arcsn <- asin(sqrt(data_p_prop$p_sig))
# Log transformation
data_p_prop$p_sig_log <- log(data_p_prop$p_sig +1) # NB Added 1 to avoid 0s
# Run Shapiro-Wilk test of normality. Can assume normality if p > .05
data_p_prop %>%
group_by(texture) %>%
shapiro_test(p_sig_arcsn) # Neither Homophonic nor Polyphonic proportion data are normally distributed. This justifies GLMER
# Run full linear mixed effects model (does not include excluding pairs because proportion data computed across pairs)
Pv_long_prop <- lmer(p_sig_arcsn ~ 1 + texture + (1 | direction) + (1 | piece/part/phrase), data = data_p_prop,
control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
summary(Pv_long_prop) # Print model summary to console
# Check without arcsin transformation (not much difference; don't bother with use arsin -- less transformations, the better)
Pv_long_prop <- lmer(p_sig ~ 1 + texture + (1 | direction) + (1 | piece/part/phrase), data = data_p_prop,
control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Pv_long_prop.output <- summary(Pv_long_prop) # Print model summary to console
Pv_long_prop.output
capture.output(Pv_long_prop.output, file = "ProportionSigGC.txt") # Write output to text file
# save model output as a text file
class(Pv_long_prop) <- "lmerMod"
stargazer(Pv_long_prop, type = "text", title='LMER Summary Statistics - Proportion Significant', out='Pv_long_prop_table.txt')
# Compute confidence intervals
Pv_long_prop.ci <- confint(Pv_long_prop)
Pv_long_prop.ci
capture.output(Pv_long_prop.ci, file = "ProportionSigGC_CI.txt")
# Now run a reduced model excluding the fixed factor of 'texture'.
Pv_long_prop_reduced <- lmer(p_sig_arcsn ~ 1 + (1 | direction) + (1 | piece/part/phrase), data = data_p_prop,
control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
summary(Pv_long_prop_reduced) # Print model summary to console
# Compare full and reduced models to see whether the model that includes texture explains more variance in GC
Pv_long_prop.anova <- anova(Pv_long_prop, Pv_long_prop_reduced) # Check output to see whether the Chi-square value is significant
Pv_long_prop.anova
capture.output(Pv_long_prop.anova, file = "ProportionSigGC_model_eval.txt") # Write output to text file
# The following does the same model comparison as above (to double check)
Pv_long_prop_LLE <- mixed(p_sig_arcsn ~ texture + (1 | direction) + (1 | piece/part/phrase), data = data_p_prop,
control = lmerControl(optimizer = "bobyqa"), method = "LRT")
Pv_long_prop_LLE # Print model summary to console and check Chi-square (should be the same as above)
# Here we can do a quick plot to see the direction of the effect (i.e., whether H or P has a greater number of significant GC cases)
Pv_texture_long_prop <- ggpredict(Pv_long_prop, terms = "texture")
plot(Pv_texture_long_prop)
Pv_texture_long_prop
## For computing confidence intervals (computationally slow)
# Pv_long_prop_ci <- confint(Pv_long_prop) # Compute confidence intervals
# Pv_long_prop_ci
# Raincloud plot (using data in original units, without arcsin transformation).
summary_data_p_prop <- summarySE(data = data_p_prop, measurevar = "p_sig", groupvars = "texture",
na.rm = TRUE, conf.interval = 0.95, .drop = TRUE)
GC_p_plot_long_prop <- data_p_prop  %>%
mutate(texture = fct_relevel(data_p_prop$texture, "H", "P")) %>%
ggplot(aes(y = p_sig, x = texture, fill = texture)) +
geom_flat_violin(position = position_nudge(x = .175, y = 0), alpha = .8, show.legend = FALSE) +
geom_point(aes(y = p_sig, x = texture, fill = texture), position = position_jitter(width = .06, height = 0), shape = 21, size = 2, color = "black", alpha = 0.5, show.legend = FALSE) +
#geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +
geom_errorbar(data = summary_data_p_prop, aes(x = texture, y = p_sig, ymin = p_sig-ci, ymax = p_sig+ci), position = position_nudge(c(-.175, -.175)), colour = "black",
width = 0.08, size = 0.6) +
geom_point(data = summary_data_p_prop, aes(x = texture, y = p_sig, fill = texture), position =
position_nudge(c(-.175, -.175)), shape = 21, size = 5, colour = "black", fill = c('orange', 'royalblue'), show.legend = FALSE) +
expand_limits(x = 3) +
# guides(fill = "none") +
# guides(color = "none") +
scale_color_ucscgb() +
scale_fill_ucscgb() +
scale_fill_manual(values=c('orange', 'royalblue')) +
# labs(title="Granger Test: \nProportion of \nsignificant p values",
#      x="Texture", y = "Proportion")+
labs(x="Texture", y = "Proportion")+
scale_x_discrete("Texture", labels = c("H" = "Homophonic","P" = "Polyphonic")) +
theme_bw() +
raincloud_theme
GC_p_plot_long_prop
ggsave("GC_p_plot_long_prop.png", dpi=600)
## Binomial Generalized Linear Mixed Effects Model (GLMER) on binary data
# Binary values indicate whether (1) or not (0) each individual Granger test was statistically significant.
Pv_binary.glme <- glmer(p_sig ~ 1 + texture + (1 | direction/pair) + (1 | piece/part/phrase),  family=binomial, data = dataPv,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary.output <- summary(Pv_binary.glme)
Pv_binary.output
capture.output(Pv_binary.output, file = "Pv_binary_GLMER.txt") # Write output to text file
# Compute confidence intervals
Pv_binary.glme.ci <- confint(Pv_binary.glme)
Pv_binary.glme.ci
capture.output(Pv_binary.glme.ci, file = "BinaryGLMM_SigGC_CI.txt")
# Find best-fitting random effects model
Pv_binary_random1.glme <- glmer(p_sig ~ 1 + (1 | direction/pair) + (1 | piece/part/phrase),  family=binomial, data = dataPv,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary_random1.output <- summary(Pv_binary_random1.glme)
Pv_binary_random1.output
capture.output(Pv_binary_random1.output, file = "Pv_binary_random1_GLMER.txt") # Write output to text file
Pv_binary_random2.glme <- glmer(p_sig ~ 1 + (1 | piece/part/phrase/direction/pair),  family=binomial, data = dataPv,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary_random2.output <- summary(Pv_binary_random2.glme)
Pv_binary_random2.output
#capture.output(Pv_binary_random1.output, file = "Pv_binary_random1_GLMER.txt") # Write output to text file
# Compare the reduced models. Result: Almost identical - Use Pv_binary_random1.glme to keep similar structure to lmer above
Pv_binary_random_comparison <- anova(Pv_binary_random1.glme, Pv_binary_random2.glme)
Pv_binary_random_comparison
#capture.output(Pv_binary_random_comparison, file = "Pv_binary_random_comparison.txt") # Write output to text file
# Compare the full and reduced model
Pv_binary_comparison <- anova(Pv_binary.glme, Pv_binary_random1.glme)
Pv_binary_comparison
capture.output(Pv_binary_comparison, file = "Pv_binary_comparison.txt") # Write output to text file
# Convert your models to tidy format
Pv_binary_tidy <- broom.mixed::tidy(Pv_binary.glme)
Pv_binary_random1_tidy <- broom.mixed::tidy(Pv_binary_random1.glme)
# Now create your table
Pv_binary_GLMER.table <- huxreg(Pv_binary_tidy, Pv_binary_random1_tidy, statistics = NULL, number_format = 2)
Pv_binary_GLMER.table
huxtable::quick_docx(Pv_binary_GLMER.table, file = "Pv_binary_GLMER_table.docx") # Make Word table (not standardized coefficients)
## Analysis of effects of MELODY INSTRUMENT ------
# Notes: First need to add column to indicate whether GC data in each row are for:
# (1) melody influencing other (Melody_to_Other)
# (2) other influencing melody (Other_to_Melody), or other influencing other (Other_to_Other),
# in Homophonic textures or 'Mixed' in polyphonic textures
dataPv_melody <- melt(data_both, id.vars = c('piece', 'part', 'phrase', 'texture', 'pair', 'musician1', 'musician2', 'melody_instrument'), measure.vars = c('p_M1_M2_Bin', 'p_M2_M1_Bin'), variable.name = 'direction', value.name = "p_sig")
dataPv_melody$leadership <- ifelse(dataPv_melody$melody_instrument == 'Mixed', 'Mixed',
ifelse(dataPv_melody$melody_instrument == dataPv_melody$musician1 & dataPv_melody$direction == 'p_M1_M2_Bin', 'Melody_to_Other',
ifelse(dataPv_melody$melody_instrument == dataPv_melody$musician2 & dataPv_melody$direction == 'p_M2_M1_Bin', 'Melody_to_Other',
ifelse(dataPv_melody$melody_instrument == dataPv_melody$musician2 & dataPv_melody$direction == 'p_M1_M2_Bin', 'Other_to_Melody',
ifelse(dataPv_melody$melody_instrument == dataPv_melody$musician1 & dataPv_melody$direction == 'p_M2_M1_Bin', 'Other_to_Melody', 'Other_to_Other')))))
#dataPv_melody <- melt(data_both, id.vars = c('piece', 'part', 'phrase', 'texture', 'pair', 'leadership'), measure.vars = c('p_M1_M2_Bin', 'p_M2_M1_Bin'), variable.name = 'direction', value.name = "p_sig")
# Compute proportion data
data_p_prop_melody <- dataPv_melody %>% group_by(piece, part, phrase, leadership) %>% summarise_at(vars(p_sig), mean)
data_p_prop_melody <- data.frame(data_p_prop_melody)
data_p_prop_melody$leadership <- as.factor(data_p_prop_melody$leadership)
# Arcsin transform
data_p_prop_melody$p_sig_arcsn <- asin(sqrt(data_p_prop_melody$p_sig))
# Run Shapiro-Wilk test of normality. Can assume normality if p > .05
data_p_prop_melody %>%
group_by(leadership) %>%
shapiro_test(p_sig_arcsn) # Neither Homophonic nor Polyphonic proportion data are normally distributed. This justifies GLMER
# Do quick boxplot to visualize data grouped by leadership; will make nicer plot below
data_p_prop_melody %>% mutate(leadership = fct_relevel(data_p_prop_melody$leadership, "Melody_to_Other", "Other_to_Melody", "Other_to_Other", "Mixed")) %>%
ggplot(aes(y = p_sig, x = leadership)) + geom_boxplot() + geom_point(position = position_jitter(width = .15, height = .02), alpha = .5) + theme_bw()
# First run the full model to test the effect of the fixed factor 'leadership' on whether or not GC is significant (p_sig or p_sig_arcsn; don't need arcsin)
Pv_long_melody <- lmer(p_sig ~ 1 + leadership + (1 | piece/part/phrase), data = data_p_prop_melody,
control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
# Pv_long_melody <- lmer(p_sig_arcsn ~ 1 + leadership + (1 | piece/part/phrase), data = data_p_prop_melody,
#                   control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Pv_long_melody.output <- summary(Pv_long_melody) # Print model summary to console
Pv_long_melody.output
capture.output(Pv_long_melody.output, file = "ProportionSigGC_Melody.txt") # Write output to text file
# save model output as a text file
class(Pv_long_melody) <- "lmerMod"
stargazer(Pv_long_melody, type = "text", title='LMER Summary Statistics - Proportion Significant', out='Pv_long_melody_table.txt')
# Pairwise comparisons (exhaustive - don't use; use planned orthogonal contrasts instead)
Melody_Pairwise.comp <- lsmeans(Pv_long_melody, pairwise ~ leadership, mult.name = "Leadership", pbkrtest.limit = 9999)
Melody_Pairwise.comp
write.table(Melody_Pairwise.comp, file = "SigGC_Melody_pairwise_comparisons.txt", sep = "")
# ANOVA with orthogonal planned contrasts: (1) Homophonic vs Polyphonic; (2) Pairing with Melody vs No Melody; (3) Melody-to-Other vs Other-to-Melody
levels(data_p_prop_melody$leadership) # Check order of conditions (important for specifying contrast coefficients)
Melody_PlannedComp <- lsmeans(Pv_long_melody, "leadership")
HvsP = c(1,-3,1,1) # Contrast comparing Homophonic with Polyphonic - this comparison is redundant with the main analysis
MELvsNoMEL = c(1,0,1,-2) # Contrast comparing pairings including Melody player vs pairings excluding Melody player
MOvsOM = c(1,0,-1,0) # Contrast comparing Melody-to-Other vs Other-to-Melody
Contrasts = list(HvsP, MELvsNoMEL, MOvsOM)
Melody_PlannedComp.output <- contrast(Melody_PlannedComp, Contrasts, adjust="none") # No need for adjust for multiple comparisons since contrasts are planned & orthogonal
capture.output(Melody_PlannedComp.output, file = "SigGC_Melody_planned_contrasts.txt")
Melody_PlannedComp.output
# Compute confidence intervals
Melody_PlannedComp.output.ci <- confint(Melody_PlannedComp.output)
Melody_PlannedComp.output.ci
capture.output(Melody_PlannedComp.output.ci, file = "Melody_PlannedComp.output_CI.txt")
# Now run a reduced model excluding the fixed factor of 'leadership'.
Pv_long_melody_reduced <- lmer(p_sig ~ 1 + (1 | piece/part/phrase), data = data_p_prop_melody,
control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
# Pv_long_melody_reduced <- lmer(p_sig_arcsn ~ 1 + (1 | piece/part/phrase), data = data_p_prop_melody,
#                         control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
summary(Pv_long_melody_reduced) # Print model summary to console
# Compare full and reduced models to see whether the model that includes texture explains more variance in GC
Pv_long_melody.anova <- anova(Pv_long_melody, Pv_long_melody_reduced) # Check output to see whether the Chi-square value is significant
Pv_long_melody.anova
capture.output(Pv_long_melody.anova, file = "ProportionSigGC_Melody_model_eval.txt") # Write output to text file
# The following does the same model comparison as above (to double check)
Pv_long_melody_LLE <- mixed(p_sig_arcsn ~ 1 + leadership + (1 | piece/part/phrase), data = data_p_prop_melody,
control = lmerControl(optimizer = "bobyqa"), method = "LRT")
Pv_long_melody_LLE # Print model summary to console and check Chi-square (should be the same as above)
# Raincloud plot (using data in original units, without arcsin transformation).
summary_melody_p_prop <- summarySE(data = data_p_prop_melody, measurevar = "p_sig", groupvars = "leadership",
na.rm = TRUE, conf.interval = 0.95, .drop = TRUE)
# summary_melody_p_prop <- summarySEwithin(data = data_p_prop_melody, measurevar = "p_sig", withinvars = "leadership", idvar = NULL,
#                                        na.rm = TRUE, conf.interval = 0.95, .drop = TRUE)
GC_p_plot_leadership <- data_p_prop_melody  %>%
mutate(leadership = fct_relevel(data_p_prop_melody$leadership, "Melody_to_Other", "Other_to_Melody", "Other_to_Other", "Mixed")) %>%
ggplot(aes(y = p_sig, x = leadership, fill = leadership)) +
geom_flat_violin(position = position_nudge(x = .175, y = 0), alpha = .8, show.legend = FALSE) +
geom_point(aes(y = p_sig, x = leadership, fill = leadership), position = position_jitter(width = .06, height = 0), shape = 21, size = 2, color = "black", alpha = 0.5, show.legend = FALSE) +
#geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5) +
geom_errorbar(data = summary_melody_p_prop, aes(x = leadership, y = p_sig, ymin = p_sig-ci, ymax = p_sig+ci), position = position_nudge(c(-.175, -.175, -.175, -.175)), colour = "black",
width = 0.08, size = 0.6) +
geom_point(data = summary_melody_p_prop, aes(x = leadership, y = p_sig, fill = leadership), position =
position_nudge(c(-.175, -.175, -.175, -.175)), shape = 21, size = 4, colour = "black", fill = c('#A2B59F', 'lightgrey', 'darkgrey', '#B59F9F'), show.legend = FALSE) +
expand_limits(x = 3) +
# guides(fill = "none") +
# guides(color = "none") +
#scale_color_ucscgb() +
#scale_fill_ucscgb() +
scale_fill_manual(values=c('#A2B59F', 'lightgrey', 'darkgrey', '#B59F9F')) +
labs(x="Direction of Influence", y = "Proportion")+
scale_x_discrete("Direction of Influence", labels = c("Melody_to_Other" = "Melody\non Other", "Other_to_Melody" = "Other\non Melody", "Other_to_Other" = "Other\non Other", "Mixed" = "Mixed\nPolyphonic")) +
theme_bw() +
raincloud_theme
GC_p_plot_leadership
ggsave("GC_p_plot_leadership.png", dpi=600)
## Binomial Generalized Linear Mixed Effects Model (GLMER) on binary data for MELODY INSTRUMENT
# Notes: Binary values indicate whether (1) or not (0) each individual Granger test
# was statistically significant.
Pv_binary_melody.glme <- glmer(p_sig ~ 1 + leadership + (1 | direction/pair) + (1 | piece/part/phrase),  family=binomial, data = dataPv_melody,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary_melody.output <- summary(Pv_binary_melody.glme)
Pv_binary_melody.output
capture.output(Pv_binary_melody.output, file = "Pv_binary_melody_GLMER.txt") # Write output to text file
# Find best-fitting random effects model
Pv_binary_melody_random1.glme <- glmer(p_sig ~ 1 + (1 | direction/pair) + (1 | piece/part/phrase),  family=binomial, data = dataPv_melody,
control = glmerControl(optimizer = "bobyqa"))
Pv_binary_melody_random1.output <- summary(Pv_binary_melody_random1.glme)
Pv_binary_melody_random1.output
capture.output(Pv_binary_random1.output, file = "Pv_binary_random1_GLMER.txt") # Write output to text file
# Compare the full and reduced model
Pv_binary_melody_comparison <- anova(Pv_binary_melody.glme, Pv_binary_melody_random1.glme)
Pv_binary_melody_comparison
capture.output(Pv_binary_melody_comparison, file = "Pv_binary_melody_comparison.txt") # Write output to text file
# Make a table
Pv_binary_melody_GLMER.table <- huxreg(Pv_binary_melody.glme, Pv_binary_melody_random1.glme, statistics = NULL, number_format = 2)
Pv_binary_melody_GLMER.table
huxtable::quick_docx(Pv_binary_melody_GLMER.table, file = "Pv_binary_melody_GLMER_table.docx") # Make Word table (not standardized coefficients)
# Orthogonal planned contrasts: (1) Homophonic vs Polyphonic; (2) Pairing with Melody vs No Melody; (3) Melody-to-Other vs Other-to-Melody
levels(dataPv_melody$leadership) # Check order of conditions (important for specifying contrast coefficients)
Melody_PlannedComp.glme <- lsmeans(Pv_binary_melody.glme, "leadership")
HvsP = c(1,-3,1,1) # Contrast comparing Homophonic with Polyphonic - this comparison is redundant with the main analysis
MELvsNoMEL = c(1,0,1,-2) # Contrast comparing pairings including Melody player vs pairings excluding Melody player
MOvsOM = c(1,0,-1,0) # Contrast comparing Melody-to-Other vs Other-to-Melody
Contrasts = list(HvsP, MELvsNoMEL, MOvsOM)
Melody_PlannedComp.glme.output <- contrast(Melody_PlannedComp.glme, Contrasts, adjust="none") # No need for adjust for multiple comparisons since contrasts are planned & orthogonal
capture.output(Melody_PlannedComp.glme.output, file = "SigGC_Melody_GLMM_planned_contrasts.txt")
Melody_PlannedComp.glme.output
# Compute confidence intervals
Melody_PlannedComp.glme.output.ci <- confint(Melody_PlannedComp.glme.output)
Melody_PlannedComp.glme.output.ci
capture.output(Melody_PlannedComp.glme.output.ci, file = "Melody_GLMM_PlannedComp.output_CI.txt")
